import glob
import os

import numpy as np
import pandas as pd
import scipy.signal

import skimage

# A whole bunch of skimage stuff
import skimage.feature
import skimage.filters
import skimage.filters.rank
import skimage.io
import skimage.morphology
import skimage.restoration
import skimage.segmentation
import skimage.transform
# from skimage.feature import register_translation

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm

# This import registers the 3D projection, but is otherwise unused.
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import
import matplotlib.pyplot as plt

import sys
sys.path.append('../../../')
import bebi103

import seaborn as sns

#################### 안쓰였나?? ################################
def legend_without_duplicate_labels(ax):
    handles, labels = ax.get_legend_handles_labels()
    unique = [(h, l) for i, (h, l) in enumerate(zip(handles, labels)) if l not in labels[:i]]
    ax.legend(*zip(*unique), bbox_to_anchor=(1.05, 1.0), loc='upper left')

# Number of replicatess
n_reps = 2000
rg = np.random.default_rng(3252)

def draw_bs_rep(data, func, rg):
    """Compute a bootstrap replicate from data."""
    bs_sample = rg.choice(data, size=len(data))
    return func(bs_sample)
#################### 안쓰였나?? ################################
def unit_vector(vector):
    """ Returns the unit vector of the vector.  """
    return vector / np.linalg.norm(vector)

def angle_for_persistance(v1, v2):
    """ For calculating cell trajectory persistence, this definition returns the only "acute angle" in radians between vectors 'v1' and 'v2'::"""
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)

    angle = np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0)) 

    # If the angle is greater than 90 degrees (π/2 radians), convert it to the corresponding acute angle.
    if angle > np.pi / 2:
        angle = np.pi - angle
    
    return angle

def angle_for_directionality(v1, v2):
    """ For calculating cell trajectory directionality between vector of electric field, this definition returns the angle in radians between vectors 'v1' and 'v2'::

            >>> angle_between((1, 0, 0), (0, 1, 0))
            1.5707963267948966
            >>> angle_between((1, 0, 0), (1, 0, 0))
            0.0
            >>> angle_between((1, 0, 0), (-1, 0, 0))
            3.141592653589793
    """
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

all_merged_means = pd.DataFrame()
all_df_filtered = pd.DataFrame()

