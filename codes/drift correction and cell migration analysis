import glob
import os

import numpy as np
import pandas as pd
import scipy.signal

import skimage

# A whole bunch of skimage stuff
import skimage.feature
import skimage.filters
import skimage.filters.rank
import skimage.io
import skimage.morphology
import skimage.restoration
import skimage.segmentation
import skimage.transform
# from skimage.feature import register_translation

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm

# This import registers the 3D projection, but is otherwise unused.
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import
import matplotlib.pyplot as plt

import sys
sys.path.append('../../../')
import bebi103

import seaborn as sns

#################### 안쓰였나?? ################################
def legend_without_duplicate_labels(ax):
    handles, labels = ax.get_legend_handles_labels()
    unique = [(h, l) for i, (h, l) in enumerate(zip(handles, labels)) if l not in labels[:i]]
    ax.legend(*zip(*unique), bbox_to_anchor=(1.05, 1.0), loc='upper left')

# Number of replicatess
n_reps = 2000
rg = np.random.default_rng(3252)

def draw_bs_rep(data, func, rg):
    """Compute a bootstrap replicate from data."""
    bs_sample = rg.choice(data, size=len(data))
    return func(bs_sample)
#################### 안쓰였나?? ################################
def unit_vector(vector):
    """ Returns the unit vector of the vector.  """
    return vector / np.linalg.norm(vector)

def angle_for_persistence(v1, v2):
    """ For calculating cell trajectory persistence, this definition returns the only "acute angle" in radians between vectors 'v1' and 'v2'::"""
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)

    angle = np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0)) 

    # If the angle is greater than 90 degrees (π/2 radians), convert it to the corresponding acute angle.
    if angle > np.pi / 2:
        angle = np.pi - angle
    
    return angle

def angle_for_directionality(v1, v2):
    """ For calculating cell trajectory directionality between vector of electric field, this definition returns the angle in radians between vectors 'v1' and 'v2'::

            >>> angle_between((1, 0, 0), (0, 1, 0))
            1.5707963267948966
            >>> angle_between((1, 0, 0), (1, 0, 0))
            0.0
            >>> angle_between((1, 0, 0), (-1, 0, 0))
            3.141592653589793
    """
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

all_merged_means = pd.DataFrame()
all_df_corrected_filtered = pd.DataFrame()

final_means_path = input("Enter path to the final means CSV: ")
filtered_spots_path = input("Enter path to the filtered spots CSV: ")

#### STEP1: Upload the spots data (.csv)

for i in range(1,3):   # ex) range(1,7): replicate from 1 to 6. 
    file_prefix = f"aItgb3_0V_{i}"

    # Construct the file paths using the prefix
    csv_file_path = f'data/{file_prefix}.csv'

    file = csv_file_path
    df = pd.read_csv(file, encoding='latin1', skiprows=[0,2,3])
    df = df[['Track ID', 'Frame', 'X', 'Y', 'Z']]
    df.columns = ['cell', 'frame', 'x', 'y', 'z']

    # Sort the DataFrame by 'frame' and then by 'cell' in ascending order.
    df = df.sort_values(['frame', 'cell'])

    # get rid of any NaN
    df = df[~df.isin([np.nan, np.inf, -np.inf]).any(axis=1)]

    #### STEP2 : Visualize Track

    dim_z = 300 # 300 um
    ip = 200.0/303.0 # interpixel dimension (200 um / 303 pixels); approx for 20x magnification

    # Absolute trajectories before drift correction
    f = plt.figure(figsize=(6,6))

    gs = gridspec.GridSpec(2, 2,height_ratios=[1,(1224.0*ip)/dim_z], width_ratios=[(1224.0*ip)/dim_z,1])

    ax1 = plt.subplot(gs[0])
    ax2 = plt.subplot(gs[2])
    ax3 = plt.subplot(gs[3])

    for c, d_  in df.groupby('cell'):

        # ignore tracks where cell has less than 6 time points
        if len(d_) <= 5:
            continue

        ax1.plot(d_.x - 1224.0*ip, 
                    d_.z)
        #ax1.set_ylim(0,300)
        #ax1.set_xlim(-676,0)
        ax2.plot(d_.x - 1224.0*ip, 
                    1224.0*ip - d_.y)
        ax2.set_xlabel('x position ($\mu$m)')
        ax2.set_ylabel('y position ($\mu$m)')
        #ax2.set_xlim(-676,0)
        #ax2.set_ylim(0,676)
        ax2.annotate(c, xy=((d_.x.values - 1224.0*ip)[-1] + 20, 
                                (1224.0*ip - d_.y.values)[-1]), 
                        xytext=((d_.x.values - 1224.0*ip)[-1], 
                                (1224.0*ip - d_.y.values)[-1]))

        ax3.plot(d_.z, 
                1224.0*ip - d_.y)

        ax1.xaxis.set_visible(False)
        ax1.set_ylabel('z ($\mu$m)')
        ax3.yaxis.set_visible(False)
        ax3.set_xlabel('z ($\mu$m)')
        #ax3.set_xlim(0,300)
        #ax3.set_ylim(0,676)
        
    plt.tight_layout()
    plt.show()

    #### STEP3 : Visualize and specify short tracks. First plot: short trajectories ; Second plot: First plot with cell annotation.
    
    f, ax = plt.subplots(1, 2, figsize=(12,6))

    for i, data_ in df.groupby('cell'):
        if len(data_.frame.unique()) <= 31:  # Maximum frame of time

            data_ = data_.replace([np.inf, -np.inf], np.nan)
            d_x = data_.x[~np.isnan(data_.x)] 
            d_y = data_.y[~np.isnan(data_.y)] 
            d_z = data_.z[~np.isnan(data_.z)] 

            if len(d_x)==0:
                continue #ignore this cell

            x = data_.x.values 
            y = data_.y.values 
            z = data_.z.values

            # Visualize track of cells which move less than or equal to 5 um in y-direction
            if np.ptp(y) <= 5:
                        for ax_ in ax:
                            ax_.plot(data_.x.values - 1224.0*ip, 
                                        1224.0*ip - data_.y.values, linewidth = 1)
                            ax_.set_xlabel('x position ($\mu$m)')
                            ax_.set_ylabel('y position ($\mu$m)')
        
                        ax[1].annotate(i, xy=((data_.x.values - 1224.0*ip)[-1] + 20, 
                                                    (1224.0*ip - data_.y.values)[-1]), 
                                            xytext=((data_.x.values - 1224.0*ip)[-1], 
                                                    (1224.0*ip - data_.y.values)[-1]))
    plt.tight_layout()
    plt.show()

    #### STEP 4: Identify non-motile cells using one or both options, and measure the degree of drift.
    
    # Generate empty DataFrames to hold filtered cell data
    df_corrected_filtered = pd.DataFrame()
    df_corrected_nonmotile = pd.DataFrame()
    df_corrected_ambiguous = pd.DataFrame()

    nonmotile_cells = []
    # Option 1 : You can mannually specify the non-motile cells from previous plot (STEP 3)
    for x in [71, 201]:
        nonmotile_cells = np.append(nonmotile_cells, x)

    # Option 2 : Take all cells that show movement less than some value that should be adjusted depending on the degree of drift. note "CHANGE HERE"
    for g, d_  in df.groupby('cell'):
        tot_len = len(d_.frame.unique())
        for i in d_.cell.unique():
            data_ = d_[d_.cell==i]

            data_ = data_.replace([np.inf, -np.inf], np.nan)
            d_x = data_.x[~np.isnan(data_.x)] 
            d_y = data_.y[~np.isnan(data_.y)] 
            d_z = data_.z[~np.isnan(data_.z)] 

            if len(d_x) == tot_len:
                if np.any([np.ptp(d_x)<=10.0, np.ptp(d_y)<=10.0]): ### CHANGE HERE ### Take all cell which move less than and equal to 10 um in either x or y-direction. ###
                    nonmotile_cells = np.append(nonmotile_cells, i)

        s_x = [0]
        s_y = [0]
        s_z = [0]

        # Measure the mean value of non-motile cells' drifted vector length 

        df_nonmotile = d_[d_.cell.isin(nonmotile_cells)]

        for t in np.arange(0,tot_len):
            if t == 0:
                continue
            shift_temp_x = []
            shift_temp_y = []
            shift_temp_z = []
            for cell, d_nm in df_nonmotile.groupby('cell'):
                shift_temp_x = np.append(shift_temp_x, d_nm[d_nm.frame==t].x.values - d_nm[d_nm.frame==t-1].x.values)
                shift_temp_y = np.append(shift_temp_y, d_nm[d_nm.frame==t].y.values - d_nm[d_nm.frame==t-1].y.values)
                shift_temp_z = np.append(shift_temp_z, d_nm[d_nm.frame==t].z.values - d_nm[d_nm.frame==t-1].z.values)
            
            s_x = np.append(s_x, np.mean(shift_temp_x))
            s_y = np.append(s_y, np.mean(shift_temp_y))
            s_z = np.append(s_z, np.mean(shift_temp_z))

        #### STEP 5: Apply drift correction
        for i in d_.cell.unique():
            data_ = d_[d_.cell==i]
            print(data_)
            # ignore cells having discontinuous time frame
            if len(data_.frame.unique()) != len(np.arange(data_.frame.min(), data_.frame.max()+1)):
                continue
                
            data_ = data_.replace([np.inf, -np.inf], np.nan)
            d_x = data_.x[~np.isnan(data_.x)] 
            d_y = data_.y[~np.isnan(data_.y)] 
            d_z = data_.z[~np.isnan(data_.z)] 

            # ignore cells havning no spots
            if len(d_x)==0:
                continue

            if len(d_x) >=0:
                if len(df_nonmotile) == 0:  # In case that there is no non-motile cell.
                    data_['x_shifted'] = data_['x']
                    data_['y_shifted'] = data_['y']
                    data_['z_shifted'] = data_['z']
                    d_s_x = data_.x_shifted
                    d_s_y = data_.y_shifted
                    d_s_z = data_.z_shifted
                else:
                    x = data_.x.values
                    y = data_.y.values
                    z = data_.z.values
                    
                    cumsum_len = len(np.arange(data_.frame.min(), data_.frame.max() + 1))
                    s_x_cumsum = np.cumsum(s_x[:cumsum_len])
                    s_y_cumsum = np.cumsum(s_y[:cumsum_len])
                    s_z_cumsum = np.cumsum(s_z[:cumsum_len])

                    if len(s_x_cumsum) < len(x):
                        x = x[:len(s_x_cumsum)]
                    if len(s_y_cumsum) < len(y):
                        y = y[:len(s_y_cumsum)]
                    if len(s_z_cumsum) < len(z):
                        z = z[:len(s_z_cumsum)]

                    data_['x_shifted'] = x - s_x_cumsum
                    data_['y_shifted'] = y - s_y_cumsum
                    data_['z_shifted'] = z - s_z_cumsum
                    
                    d_s_x = data_.x_shifted
                    d_s_y = data_.y_shifted
                    d_s_z = data_.z_shifted

                # Save to new dataframe
                if i in nonmotile_cells:
                    df_corrected_nonmotile = pd.concat([df_corrected_nonmotile, data_], 
                                                ignore_index = True)
                    
                elif np.sqrt(np.ptp(d_s_x)**2 + np.ptp(d_s_y)**2 + np.ptp(d_s_z)**2) >=20:
                
                    df_corrected_filtered = pd.concat([df_corrected_filtered, data_], 
                                            ignore_index = True)
                    
                else:
                    df_corrected_ambiguous = pd.concat([df_corrected_ambiguous, data_], 
                                            ignore_index = True)

    #### STEP 6: Plot tracks to see what was filtered out and whether drift correction worked
    f, ax = plt.subplots(1, 3, figsize=(9, 3))   

    # Add distinct prefix
    df_corrected_filtered['cell'] = file_prefix + "_" + df_corrected_filtered['cell'].astype(str)
    df_corrected_nonmotile['cell'] = file_prefix + "_" + df_corrected_nonmotile['cell'].astype(str)
    df_corrected_ambiguous['cell'] = file_prefix + "_" + df_corrected_ambiguous['cell'].astype(str)

    # (1) filtered cells
    for g, d_ in df_corrected_filtered.groupby('cell'):
        for i in d_.cell.unique():
            data_ = d_[d_.cell == i]
            data_ = data_.replace([np.inf, -np.inf], np.nan)
            d_x = data_.x[~np.isnan(data_.x)] 
            if len(d_x) == 0:
                continue
            ax[0].plot(data_.x_shifted.values - 1224.0*ip, 
                    1224.0*ip - data_.y_shifted.values)
    ax[0].set_xlabel('x position ($\mu$m)')
    ax[0].set_ylabel('y position ($\mu$m)')
    ax[0].set_title('Accepted cell tracks')

    # (2) non-motile cells with cell annotation
    for g, d_ in df_corrected_nonmotile.groupby('cell'):
        for i in d_.cell.unique():
            data_ = d_[d_.cell == i]
            data_ = data_.replace([np.inf, -np.inf], np.nan)
            d_x = data_.x[~np.isnan(data_.x)] 
            if len(d_x) == 0:
                continue
            x_shifted = data_.x_shifted.values - 1224.0 * ip
            y_shifted = 1224.0 * ip - data_.y_shifted.values

            ax[1].plot(x_shifted, y_shifted)

            # show cell ID annotation
            ax[1].annotate(i, 
                        xy=(x_shifted[-1], y_shifted[-1]), 
                        xytext=(x_shifted[-1] + 5, y_shifted[-1] + 5), 
                        fontsize=5,
                        arrowprops=dict(arrowstyle='->', lw=0.5))
    ax[1].set_xlabel('x position ($\mu$m)')
    ax[1].set_ylabel('y position ($\mu$m)')
    ax[1].set_title('Non-motile cell tracks')

    # (3) ambiguous
    for g, d_ in df_corrected_ambiguous.groupby('cell'):
        for i in d_.cell.unique():
            data_ = d_[d_.cell == i]
            data_ = data_.replace([np.inf, -np.inf], np.nan)
            d_x = data_.x[~np.isnan(data_.x)] 
            if len(d_x) == 0:
                continue
            x_shifted = data_.x_shifted.values - 1224.0 * ip
            y_shifted = 1224.0 * ip - data_.y_shifted.values

            ax[2].plot(x_shifted, y_shifted)

            # ✨ Annotate 마지막 위치에 cell ID 표시
            ax[2].annotate(i, 
                        xy=(x_shifted[-1], y_shifted[-1]), 
                        xytext=(x_shifted[-1] + 5, y_shifted[-1] + 5), 
                        fontsize=5,
                        arrowprops=dict(arrowstyle='->', lw=0.5))
    ax[2].set_xlabel('x position ($\mu$m)')
    ax[2].set_ylabel('y position ($\mu$m)')
    ax[2].set_title('Ambiguous cell tracks')

    plt.tight_layout()
    plt.show()

    # STEP 7: Calculate the mean of persistence, speed, total distance traveled, speed from total distance traveled, directionality.

    df_persistence = pd.DataFrame()
    df_speed = pd.DataFrame()
    df_distance=pd.DataFrame()
    df_drec = pd.DataFrame()

    dx = []
    dy = []
    dz = []

    for cell, d_ in df_corrected_filtered.groupby(['cell']):
        ##### PERSISTENCE #####
        if len(d_.frame.unique())>=0:                                   
            for t in np.arange(d_.frame.min(),d_.frame.max(), 6)[1:-1]: ### Calculate the acute angle and directional persistence between two vectors separated by a 6-frame interval ###
                dx1 = d_[d_.frame== t].x.values[0] - d_[d_.frame== t-6].x.values[0]
                dy1 = d_[d_.frame== t].y.values[0] - d_[d_.frame== t-6].y.values[0]
                dz1 = d_[d_.frame== t].z.values[0] - d_[d_.frame== t-6].z.values[0]
                dx2 = d_[d_.frame== t+6].x.values[0] - d_[d_.frame== t].x.values[0]
                dy2 = d_[d_.frame== t+6].y.values[0] - d_[d_.frame== t].y.values[0]
                dz2 = d_[d_.frame== t+6].z.values[0] - d_[d_.frame== t].z.values[0]

                angle = angle_for_persistence([dx2, dy2,dz2], [dx1, dy1,dz1])
                cos_angle = np.cos(angle)
                
                datalist = {'cell': cell[0],
                            'frame': t,
                            'angle':angle,
                            'cos_angle': cos_angle}
                df_dict = pd.DataFrame([datalist])
                df_persistence = pd.concat([df_persistence, df_dict], ignore_index=True)

        ##### SPEED #####
        speed_prep=[]
        if len(d_.frame.unique()) >=0:                               
            tot = 0
            for t in np.arange(d_.frame.min(),d_.frame.max(), 1)[1:]:
                vec_t1 = [d_[d_.frame == t].x.values[0] - d_[d_.frame == t-1].x.values[0],
                            d_[d_.frame == t].y.values[0] - d_[d_.frame == t-1].y.values[0],
                            d_[d_.frame == t].z.values[0] - d_[d_.frame == t-1].z.values[0]]
                tot += np.sqrt(vec_t1[0]**2 + vec_t1[1]**2)
            speed_prep = np.append(speed_prep,tot/len(np.arange(d_.frame.min(),d_.frame.max(), 1)[1:])/60)
            datalist_2 = {'cell': cell[0],
                        'frame':t,
                        'speed':speed_prep[0],}
            df_dict_2 = pd.DataFrame([datalist_2])
            df_speed=pd.concat([df_speed,df_dict_2], ignore_index=True)

        ##### TOTAL DISTANCE TRAVELED #####
        if len(d_.frame.unique()) > 0:  # Check whether the cell has at least one frame.
            total_distance = 0
            for t in np.arange(d_.frame.min(), d_.frame.max() + 1, 1)[1:]:
                vec_t1 = [d_[d_.frame == t].x.values[0] - d_[d_.frame == t-1].x.values[0],
                        d_[d_.frame == t].y.values[0] - d_[d_.frame == t-1].y.values[0],
                        d_[d_.frame == t].z.values[0] - d_[d_.frame == t-1].z.values[0]]
                total_distance += np.sqrt(vec_t1[0]**2 + vec_t1[1]**2 + vec_t1[2]**2)  # 벡터의 크기를 합산하여 총 이동 거리 계산

            # 이동한 총 거리를 초당 속도로 나누어 평균 속도 계산
            average_speed = total_distance / (len(np.arange(d_.frame.min(), d_.frame.max() + 1, 1)[1:]) * 60)
            
            # 결과를 데이터프레임에 추가
            datalist_3 = {
                'cell': cell[0],
                'total_distance': total_distance,  # 각 셀이 이동한 총 거리
                'average_speed_from_distance': average_speed,  # 초당 평균 속도
            }
            df_dict_3 = pd.DataFrame([datalist_3])
            df_distance=pd.concat([df_distance,df_dict_3], ignore_index=True)

        if len(d_.frame.unique())>=0:                                    ############# Directionality ##########
            for t in np.arange(d_.frame.min(),d_.frame.max(), 6)[1:-1]: 
                dx_drec = d_[d_.frame== t].x.values[0] - d_[d_.frame== t-6].x.values[0]
                dy_drec = d_[d_.frame== t].y.values[0] - d_[d_.frame== t-6].y.values[0]

                angle_drec = angle_for_directionality([dx_drec,dy_drec], [1,0])
                cos_angle_drec = np.cos(angle_drec)

                datalist_4 = {'cell': cell[0],
                            'frame': t,
                            'angle_drec': angle_drec,
                            'cos_drec_drec': cos_angle_drec}
                df_dict_4 = pd.DataFrame([datalist_4])
                df_drec = pd.concat([df_drec, df_dict_4], ignore_index = True)


    # 'cell'별로 'cos_angle'의 평균 계산
    cos_persistence_means = df_persistence.groupby('cell')['cos_angle'].mean().reset_index()
    speed_means = df_speed.groupby('cell')['speed'].mean().reset_index()
    cos_directionality_means = df_drec.groupby('cell')['cos_drec_drec'].mean().reset_index()

    cos_persistence_means.columns = ['cell', 'cos_persistence_mean']  # 열 이름 변경
    speed_means.columns=['cell','speed_mean']
    cos_directionality_means.columns = ['cell', 'cos_directionality_mean']

    merged_means = pd.merge(cos_persistence_means, speed_means, on='cell')
    merged_means = pd.merge(merged_means, df_distance, on='cell')
    merged_means = pd.merge(merged_means, cos_directionality_means, on='cell')

     # Combine the processed data into the cumulative DataFrames
    all_merged_means = pd.concat([all_merged_means, merged_means], ignore_index=True)
    all_df_corrected_filtered = pd.concat([all_df_corrected_filtered, df_corrected_filtered], ignore_index=True)

# Save the combined data to new CSV files
all_merged_means.to_csv(final_means_path, index=False)
all_df_corrected_filtered.to_csv(filtered_spots_path, index=False)
